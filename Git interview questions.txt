1)What are the fundamental differences between DevOps & Agile?
Ans)The differences between the two are listed down in the table below.
           	   DevOps			              Agile
1)Agility in both Development & Operations	   1)Agility in only Development
2)Involves processes such as CI, CD, CT, etc       2)Involves practices such as Agile Scrum,Agil Kanban,etc.
3)Timeliness & quality have equal priority	   3)Timeliness is the main priority
4)Smaller release cycles with immediate feedback   4)Smaller release cycles
5)Feedback is from self (Monitoring tools)	   5)Feedback is from customers
6)Agility & need for Automation                	   6)Agility Only

2)What is the need for DevOps?
Ans)Instead of releasing big sets of features, companies are trying to see if small features can be transported to their customers through a series of release trains. This has many advantages like quick feedback from customers, better quality of software etc. which in turn leads to high customer satisfaction. To achieve this, companies are required to:
--Increase deployment frequency
--Lower failure rate of new releases
--Shortened lead time between fixes
--Faster mean time to recovery in the event of new release crashing
DevOps fulfills all these requirements and helps in achieving seamless software delivery. You can give examples of companies like Etsy, Google and Amazon which have adopted DevOps to achieve levels of performance that were unthinkable even five years ago. They are doing tens, hundreds or even thousands of code deployments per day while delivering world class stability, reliability and security.

3)How do all these tools work together?
Ans)Given below is a generic logical flow where everything gets automated for seamless delivery. However, this flow may vary from organization to organization as per the requirement.
--Developers develop the code and this source code is managed by Version Control System tools like Git etc.
--Developers send this code to the Git repository and any changes made in the code is committed to this    Repository.
--Jenkins pulls this code from the repository using the Git plugin and build it using tool like Ant or Maven.
--Configuration management tools like puppet deploys & provisions testing environment and then Jenkins       releases this code on the test environment on which testing is done using tools like selenium.
--Once the code is tested, Jenkins send it for deployment on the production server (even production server is    provisioned & maintained by tools like puppet).
--After deployment It is continuously monitored by tools like Nagios.
--Docker containers provides testing environment to test the build features.

4)What are the advantages of DevOps?
Ans)For this answer, you can use your past experience and explain how DevOps helped you in your previous job. If you don’t have any such experience, then you can mention the below advantages.
Technical benefits:
--Continuous software delivery
--Less complex problems to fix
--Faster resolution of problems
Business benefits:
--Faster delivery of features
--More stable operating environments
--More time available to add value (rather than fix/maintain)

5)What is Version control?
Ans)It is a system that records changes to a file or set of files over time so that you can recall specific versions later. Version control systems consist of a central shared repository where teammates can commit changes to a file or set of file. Then you can mention the uses of version control.
Version control allows you to:
--Revert files back to a previous state.
--Revert the entire project back to a previous state.
--Compare changes over time.
--See who last modified something that might be causing a problem.
--Who introduced an issue and when.

6)What are the benefits of using version control?
Ans)I will suggest you to include the following advantages of version control:
--With Version Control System (VCS), all the team members are allowed to work freely on any file at any time. VCS will later allow you to merge all the changes into a common version.
--All the past versions and variants are neatly packed up inside the VCS. When you need it, you can request any version at any time and you’ll have a snapshot of the complete project right at hand.
--Every time you save a new version of your project, your VCS requires you to provide a short description of what was changed. Additionally, you can see what exactly was changed in the file’s content. This allows you to know who has made what change in the project.
--A distributed VCS like Git allows all the team members to have complete history of the project so if there is a breakdown in the central server you can use any of your teammate’s local Git repository.

7)Describe branching strategies you have used.
This question is asked to test your branching experience so tell them about how you have used branching in your previous job and what purpose does it serves, you can refer the below points:
Feature branching:--A feature branch model keeps all of the changes for a particular feature inside of a branch. When the feature is fully tested and validated by automated tests, the branch is then merged into master.
Task branching:--In this model each task is implemented on its own branch with the task key included in the branch name. It is easy to see which code implements which task, just look for the task key in the branch name.
Release branching:--Once the develop branch has acquired enough features for a release, you can clone that branch to form a Release branch. Creating this branch starts the next release cycle, so no new features can be added after this point, only bug fixes, documentation generation, and other release-oriented tasks should go in this branch. Once it is ready to ship, the release gets merged into master and tagged with a version number. In addition, it should be merged back into develop branch, which may have progressed since the release was initiated.
In the end tell them that branching strategies varies from one organization to another, so I know basic branching operations like delete, merge, checking out a branch etc.

8)What is Git?
I will suggest that you attempt this question by first explaining about the architecture of git as shown in the below diagram. You can refer to the explanation given below:
--Git is a Distributed Version Control system (DVCS). It can track changes to a file and allows you to revert back to any particular change.
--Its distributed architecture provides many advantages over other Version Control Systems (VCS) like SVN one major advantage is that it does not rely on a central server to store all the versions of a project’s files. Instead, every developer “clones” a copy of a repository I have shown in the diagram below with “Local repository” and has the full history of the project on his hard drive so that when there is a server outage, all you need for recovery is one of your teammate’s local Git repository.
--There is a central cloud repository as well where developers can commit changes and share it with other teammates as you can see in the diagram where all collaborators are commiting changes “Remote repository”.

9)Explain some basic Git commands?
Below are some basic Git commands:

git config --global user.name "name       config the author name and email adress to be used with 
git config --global user.email "E-mail"         your commit 
    
git init                                   create a new local repo

git clone/path/to/repository               create a working copy a local repo

git clone username@host:/path/to/repo      for a remote server,use

git add <filename>                         Add one or more file to staging
  git add*

git commit -m "commit message"             commit changes to head

git commit -a                              commit ant files you have added with git add and also a commit any                                              files you have changed

git push origin master                     send changes to the master branch of your remote repo

git status                                 List the files you have changed and those you still need to add or                                                 commit
git remote add origin <server>            if you have not connected your local repo to a remote server, add                                                 the server to be able to push to it
10)In Git how do you revert a commit that has already been pushed and made public?
There can be two answers to this question so make sure that you include both because any of the below options can be used depending on the situation:
Remove or fix the bad file in a new commit and push it to the remote repository. This is the most natural way to fix an error. Once you have made necessary changes to the file, commit it to the remote repository for that I will use
#git commit -m “commit message”
Create a new commit that undoes all changes that were made in the bad commit.to do this I will use a command
#git revert <name of bad commit>

11)What is Git bisect? How can you use it to determine the source of a (regression) bug?
Ans)I will suggest you to first give a small definition of Git bisect, Git bisect is used to find the commit that introduced a bug by using binary search. Command for Git bisect is
#git bisect <subcommand> <options>
Now since you have mentioned the command above, explain what this command will do, This command uses a binary search algorithm to find which commit in your project’s history introduced a bug. You use it by first telling it a “bad” commit that is known to contain the bug, and a “good” commit that is known to be before the bug was introduced. Then Git bisect picks a commit between those two endpoints and asks you whether the selected commit is “good” or “bad”. It continues narrowing down the range until it finds the exact commit that introduced the change.

12)What is Git rebase and how can it be used to resolve conflicts in a feature branch before merge?
Ans)According to me, you should start by saying git rebase is a command which will merge another branch into the branch where you are currently working, and move all of the local commits that are ahead of the rebased branch to the top of the history on that branch.
Now once you have defined Git rebase time for an example to show how it can be used to resolve conflicts in a feature branch before merge, if a feature branch was created from master, and since then the master branch has received new commits, Git rebase can be used to move the feature branch to the tip of master.
The command effectively will replay the changes made in the feature branch at the tip of master, allowing conflicts to be resolved in the process. When done with care, this will allow the feature branch to be merged into master with relative ease and sometimes as a simple fast-forward operation.

13)How do you configure a Git repository to run code sanity checking tools right before making commits, and preventing them if the test fails?
Ans)I will suggest you to first give a small introduction to sanity checking, A sanity or smoke test determines whether it is possible and reasonable to continue testing.
Now explain how to achieve this, this can be done with a simple script related to the pre-commit hook of the repository. The pre-commit hook is triggered right before a commit is made, even before you are required to enter a commit message. In this script one can run other tools, such as linters and perform sanity checks on the changes being committed into the repository.

14)How do you find a list of files that has changed in a particular commit?
For this answer instead of just telling the command, explain what exactly this command will do so you can say that, To get a list files that has changed in a particular commit use command
#git diff-tree -r {hash}
Given the commit hash, this will list all the files that were changed or added in that commit. The -r flag makes the command list individual files, rather than collapsing them into root directory names only.
You can also include the below mention point although it is totally optional but will help in impressing the interviewer.
The output will also include some extra information, which can be easily suppressed by including two flags:
#git diff-tree –no-commit-id –name-only -r {hash}
Here –no-commit-id will suppress the commit hashes from appearing in the output, and –name-only will only print the file names, instead of their paths.

15) How do you setup a script to run every time a repository receives new commits through push?
Ans)There are three ways to configure a script to run every time a repository receives new commits through push, one needs to define either a pre-receive, update, or a post-receive hook depending on when exactly the script needs to be triggered.
--Pre-receive hook in the destination repository is invoked when commits are pushed to it. Any script bound to this hook will be executed before any references are updated. This is a useful hook to run scripts that help enforce development policies.
--Update hook works in a similar manner to pre-receive hook, and is also triggered before any updates are actually made. However, the update hook is called once for every commit that has been pushed to the destination repository.
--Finally, post-receive hook in the repository is invoked after the updates have been accepted into the destination repository. This is an ideal place to configure simple deployment scripts, invoke some continuous integration systems, dispatch notification emails to repository maintainers, etc.
Hooks are local to every Git repository and are not versioned. Scripts can either be created within the hooks directory inside the “.git” directory, or they can be created elsewhere and links to those scripts can be placed within the directory.

16)How will you know in Git if a branch has already been merged into master?
Ans)I will suggest you to include both the below mentioned commands:
#git branch –merged lists the branches that have been merged into the current branch.
#git branch –no-merged lists the branches that have not been merged.

17)What is the difference between Git and SVN?
Ans)                 Git	                                     SVN
1. Git is a Decentralized Version Control            1. SVN is a  Centralized Version Control tool
2.  It belongs to the 3rd generation of Version      2. It belongs to the 2nd generation of version
Control tools	                                         Control tools
3. Clients can clone entire repositories on their    3.  Version history is stored on a server-side
 local systems	                                         repository
4. Commits are possible even if offline	             4. Only online commits are allowed
5. Push/pull operations are faster	             5. Push/pull operations are slower
6. Works are shared automatically by commit	     6. Nothing is shared automatically

18)What is Git?
Ans)I will suggest you to attempt this question by first telling about the architecture of git as shown in the below diagram just try to explain the diagram by saying:
--Git is a Distributed Version Control system (DVCS). It can track changes to a file and allows you to revert back to any particular change.
--Its distributed architecture provides many advantages over other Version Control Systems (VCS) like SVN one major advantage is that it does not rely on a central server to store all the versions of a project’s files.
--Instead, every developer “clones” a copy of a repository I have shown in the diagram with “Local repository” and has the full history of the project on his hard drive so when there is a server outage all you need for recovery is one of your teammate’s local Git repository.
--There is a central cloud repository as well where developers can commit changes and share it with other teammates as you can see in the diagram where all collaborators are commiting changes “Remote repository”. 

19)What is the command to write a commit message in Git?
Ans)Answer to this is pretty straightforward.Command that is used to write a commit message is “git commit -a”.Now explain about -a flag by saying -a on the command line instructs git to commit the new content of all tracked files that have been modified. Also mention you can use “git add<file>” before git commit -a if new files need to be committed for the first time.

20)What is ‘bare repository’ in Git?
Ans)You are expected to tell the difference between a “working directory” and “bare repository”.A “bare” repository in Git just contains the version control information and no working files (no tree) and it doesn’t contain the special .git sub-directory. Instead, it contains all the contents of the .git sub-directory directly in the main directory itself, where as working directory consist of:  
--A .git subdirectory with all the Git related revision history of your repo.
--A working tree, or checked out copies of your project files.

21)What language is used in Git?
Ans)Instead of just telling the name of the language, you need to tell the reason for using it as well. I will suggest you to answer this by saying:Git uses ‘C’ language. GIT is fast, and ‘C’ language makes this possible by reducing the overhead of run times associated with high level languages.

22)What is the difference between git pull and git fetch?
Ans)Git pull command pulls new changes or commits from a particular branch from your central repository and updates your target branch in your local repository.Git fetch is also used for the same purpose but it works in a slightly different way. When you perform a git fetch, it pulls all new commits from the desired branch and stores it in a new branch in your local repository. If you want to reflect these changes in your target branch, git fetch must be followed with a git merge. Your target branch will only be updated after merging the target branch and fetched branch. Just to make it easy for you, remember the equation below:
Git pull = git fetch + git merge

23)What is ‘staging area’ or ‘index’ in Git?
Ans)That before completing the commits, it can be formatted and reviewed in an intermediate area known as ‘Staging Area’ or ‘Index’. From the diagram it is evident that every change is first verified in the staging area I have termed it as “stage file” and then that change is committed to the repository.

24)What is Git stash?
Ans)According to me you should first explain the need for Git stash.Often, when you’ve been working on part of your project, things are in a messy state and you want to switch branches for sometime to work on something else. The problem is, you don’t want to do a commit of half-done work just so you can get back to this point later. The answer to this issue is Git stash.Now explain what is Git stash. Stashing takes your working directory that is, your modified tracked files and staged changes and saves it on a stack of unfinished changes that you can reapply at any time.

25)Begin this answer by saying for what purpose we use Git ‘stash drop’.
Ans)Git ‘stash drop’ command is used to remove the stashed item. It will remove the last added stash item by default, and it can also remove a specific item if you include it as an argument.Now give an example.
If you want to remove a particular stash item from the list of stashed items you can use the below commands:
#git stash list: It will display the list of stashed items like:
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051 Revert “added file_size”
stash@{2}: WIP on master: 21d80a5 added number to log
If you want to remove an item named stash@{0} use command git stash drop stash@{0}.

26)What is the function of ‘git config’?
Ans)First tell why we need ‘git config‘. 
Git uses your username to associate commits with an identity. The git config command can be used to change your Git configuration, including your username.Now explain with an example.Suppose you want to give a username and email id to associate commit with an identity so that you can know who has made a particular commit. For that I will use:
#git config –global user.name “Your Name”: This command will add username.
#git config –global user.email “Your E-mail Address”: This command will add email id.

27)What does commit object contains?
Ans)Commit object contains the following components, you should mention all the three points present below:
--A set of files, representing the state of a project at a given point of time
--Reference to parent commit objects
--An SHAI name, a 40 character string that uniquely identifies the commit object.

28)How can you create a repository in Git?
Ans)This is probably the most frequently asked questions and answer to this is really simple.
To create a repository, create a directory for the project if it does not exist, then run command “git init”. By running this command .git directory will be created in the project directory.

29)What is SubGit?
Ans)Begin this answer by explaining what is SubGit used for.
SubGit is a tool for SVN to Git migration. It creates a writable Git mirror of a local or remote Subversion repository and uses both Subversion and Git as long as you like.Now you can include some advantages like you can do a fast one-time import from Subversion to Git or use SubGit within Atlassian Bitbucket Server.We can use SubGit to create a bi-directional Git-SVN mirror of existing Subversion repository. You can push to Git or commit to Subversion at your convenience. Synchronization will be done by SubGit.















